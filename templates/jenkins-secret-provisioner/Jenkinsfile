pipeline {
  parameters {
    string(name: 'secret_name', defaultValue: "${default_secret_name}", description: 'The name of the Kubernetes secret to create.')
    string(name: 'secret_type', defaultValue: "${default_secret_type}", description: 'The type of Kubernetes Secret to create (generic, docker-registry, or docker-registry-from-file).')
    string(name: 'registry_path', defaultValue: "${default_registry_path}", description: 'The URL of the Docker registry to use when creating the Kubernetes secret.')
    string(name: 'generic_key', defaultValue: "${default_generic_key}", description: 'The key to use when creating a generic secret.')

    string(name: 'jenkins_controller_name', defaultValue: "${default_controller_name}", description: 'The Kubernetes Namespace where the Secret will be created is based on the name of the Jenkins Controller.')
    credentials(name: 'jenkins_credential_id', defaultValue: "${default_jenkins_credential_id}", description: 'The ID of the Jenkins credentials to use when creating the Kubernetes secret.')
  }

  agent {
    kubernetes {
      yaml """
      apiVersion: v1
      kind: Pod
      spec:
        restartPolicy: Never
        containers:
        - name: kubectl
          image: artifactory.cloud.cms.gov/docker/bitnami/kubectl:1.29
          command: ['tail', '-f', '/dev/null']
        securityContext:
          runAsUser: 1001
      """
    }
  }

  stages {
    stage('Create or Replace Secret') {
      steps {
        container('kubectl') {
          script {
            sh "kubectl delete secret \"${params.secret_name}\" --ignore-not-found -n \"cbc-${params.jenkins_controller_name}\""

            switch (params.secret_type) {
              case 'generic':
                withCredentials([string(credentialsId: "${params.jenkins_credential_id}", variable: 'SECRET')]) {
                  sh """
                  kubectl create secret generic "${params.jenkins_credential_id}" -n "cbc-${params.jenkins_controller_name}" \
                    --from-literal="${params.generic_key}=\$SECRET" \
                  """
                }
                break
              case 'docker-registry':
                withCredentials([usernamePassword(credentialsId: "${params.jenkins_credential_id}", usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                  sh """
                  kubectl create secret docker-registry "${params.secret_name}" -n "cbc-${params.jenkins_controller_name}" \
                    --docker-server="${params.registry_path}" \
                    --docker-username="\$USER" \
                    --docker-password="\$PASS"
                  """
                }
                break
              case 'docker-registry-from-file':
                withCredentials([file(credentialId: "${params.jenkins_credential_id}", variable: 'DOCKER_CONFIG')]) {
                  sh """
                    kubectl create secret docker-registry "${params.secret_name}" -n "cbc-${params.jenkins_controller_name}" \
                      --from-file=".dockerconfigjson=\$DOCKER_CONFIG"
                  """
                }
                break
              default:
                error("Invalid secret type: ${params.secret_type}")
            }
          }
        }
      }
    }
  }
}
