pipeline {
  parameters {
    string(name: 'git_manifest_branch', defaultValue: "${default_git_manifest_branch ?: 'main'}", description: 'The branch name to checkout.')
    string(name: 'git_author_name', defaultValue: "${default_git_author_name ?: 'Deployment Pipeline'}", description: 'The name to use as the author of git commits.')
    string(name: 'git_author_email', defaultValue: "${default_git_author_email ?: ''}", description: 'The email address to use for the author of git commits.')
    string(name: 'environment_path', defaultValue: "${default_environment_path ?: 'dev'}", description: 'Path to the environment directory in the manifest repository.')
    string(name: 'target_service', defaultValue: "${default_target_service ?: ''}", description: 'The name of the service to update.')
    string(name: 'image', defaultValue: "${default_image ?: ''}", description: 'The fully qualified container image name.')
    string(name: 'tag', description: 'Container image tag.')
    string(name: 'maximum_retries', defaultValue: "${default_maximum_retries ?: '3'}", description: 'The maximum number of retries to attempt when applying changes to the manifest repo. Each retry will be delayed by 1.5 ^ n seconds up to a maximum of 30.')
  }

  agent {
    kubernetes {
      yaml """
      apiVersion: v1
      kind: Pod
      metadata:
        annotations:
          com.cloudbees.sidecar-injector/inject: no
      spec:
        restartPolicy: Never
        containers:
        - name: fetch
          image: artifactory.cloud.cms.gov/docker/alpine:3
          command: ['tail', '-f', '/dev/null']
      """
    }
  }

  stages {
    stage('kustomize') {
      steps {
        container('fetch') {
          script {
            checkout scmGit(
              branches: [[ name: "${params.git_manifest_branch}" ]],
              userRemoteConfigs: [[
                url: "${git_manifest_repository}",
                credentialsId: "${git_manifest_credentials}"
              ]]
            )
          }
        }
        container('fetch') {
          script {
            def fullImage = "${params.image}:${params.tag}"
            def isHttps = git_manifest_repository.startsWith('https://')

            sh """
              set -e
              # Install prerequisites
              apk add --update --no-cache curl tar gzip git openssh
              curl -sSL https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v4.5.7/kustomize_v4.5.7_linux_amd64.tar.gz | tar xz -C /usr/local/bin
              kustomize version

              # Set git config
              git config --global --add safe.directory "${WORKSPACE}"
              git remote set-url origin "${git_manifest_repository}"
              git config --global user.email '${params.git_author_email}'
              git config --global user.name '${params.git_author_name}'
              echo "[LOG] Target Service -> ${params.target_service}"
              echo "[LOG] Target Manifest Repo -> ${git_manifest_repository}"
              echo "[LOG] Target Image -> ${fullImage}"
              echo "[LOG] Target Environment -> ${params.environment_path}"
            """

            def retryCount = 0
            def maxRetries = params.maximum_retries.toInteger()
            def gitPushResult = -1
            while (gitPushResult != 0) {
              sh """
                cd "${params.environment_path}"
                kustomize edit set image ${params.target_service}=${fullImage}
                git status
                git diff
                if [[ \$(git diff --name-only | wc -l | tr -d ' ') -eq "0" ]]; then
                    echo '[WARN] No changes made to manifest'
                    exit 0
                fi
                git commit -am "pipeline update service ${params.target_service} to ${params.tag}"
              """

              if (isHttps) {
                withCredentials([usernamePassword(credentialsId: "${git_manifest_credentials}", usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                  gitPushResult = sh(
                    script: "git push \"https://\${GIT_USERNAME}:\${GIT_PASSWORD}@${git_manifest_repository.replace('https://', '')}\" \"HEAD:${params.git_manifest_branch}\"",
                    returnStatus: true
                  )
                }
              } else {
                withCredentials([sshUserPrivateKey(credentialsId: "${git_manifest_credentials}", keyFileVariable: 'SSH_PRIVATE_KEY_FILE', passphraseVariable: 'SSH_PASSPHRASE', usernameVariable: 'GIT_USERNAME')]) {
                  def sshCommand = 'ssh -o StrictHostKeyChecking=no -i "$SSH_PRIVATE_KEY_FILE"'
                  gitPushResult = sh(
                    script: "GIT_SSH_COMMAND='${sshCommand}' git push origin \"HEAD:${params.git_manifest_branch}\"",
                    returnStatus: true
                  )
                }
              }

              if (gitPushResult != 0) {
                retryCount++
                if (retryCount > maxRetries) {
                  error "[ERROR] Failed to apply changes to manifest after ${maxRetries} retries."
                }

                def delay = retryCount < 10 ? (1.5 ** (retryCount - 1)) : 30
                echo "[WARN] Failed to apply changes to manifest. Retrying in ${delay} seconds."
                sleep delay
                echo "Resetting to origin/${params.git_manifest_branch} and re-applying the image update."
                if (isHttps) {
                  withCredentials([usernamePassword(credentialsId: "${git_manifest_credentials}", usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                    sh """
                      git fetch "https://\${GIT_USERNAME}:\${GIT_PASSWORD}@${git_manifest_repository.replace('https://', '')}" "${params.git_manifest_branch}"
                    """
                  }
                } else {
                  withCredentials([sshUserPrivateKey(credentialsId: "${git_manifest_credentials}", keyFileVariable: 'SSH_PRIVATE_KEY_FILE', passphraseVariable: 'SSH_PASSPHRASE', usernameVariable: 'GIT_USERNAME')]) {
                    def sshCommand = 'ssh -o StrictHostKeyChecking=no -i "$SSH_PRIVATE_KEY_FILE"'
                    sh """
                      GIT_SSH_COMMAND='${sshCommand}' git fetch origin "${params.git_manifest_branch}"
                    """
                  }
                }
                // Reset HEAD to the revision that was just fetched
                sh "git reset --hard FETCH_HEAD"
              }
            }
          }
        }
      }
    }
  }
}
