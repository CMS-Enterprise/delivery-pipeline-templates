pipeline {
  parameters {
    string(name: 'git_manifest_repository', description: 'The URL of the Git repository containing Kubernetes manifests.')
    string(name: 'git_manifest_branch', description: 'The branch name to checkout.')
    string(name: 'git_credentials', description: 'Jenkins credential ID for accessing the Git repository.')
    string(name: 'git_user_name', description: 'user name to use for git commits.')
    string(name: 'git_user_email', description: 'The email address to use for git commits.')
    string(name: 'environment_path', defaultValue: "${default_environment_path}", description: 'Path to the environment directory in the manifest repository.')
    string(name: 'target_service', defaultValue: "${default_target_service}", description: 'The name of the service to update.')
    string(name: 'image', defaultValue: "${default_image ?: 'my-app'}", description: 'The fully qualified container image name.')
    string(name: 'tag', defaultValue: "${default_tag ?: ''}", description: 'Container image tag.')
  }

  agent {
    kubernetes {
      yaml """
      apiVersion: v1
      kind: Pod
      metadata:
        annotations:
          com.cloudbees.sidecar-injector/inject: no
      spec:
        restartPolicy: Never
        containers:
        - name: fetch
          image: artifactory.cloud.cms.gov/docker/alpine:3
          command: ['tail', '-f', '/dev/null']
      """
    }
  }

  environment {
    TEMP_MANIFEST_DIR = 'manifest-repo'
  }

  stages {
    stage('kustomize') {
      steps {
        container('fetch') {
          script {
            def sshRepoUrl = params.git_manifest_repository.replace('https://github.com/', 'git@github.com:').replace('.git', '') + '.git'
            checkout scmGit(
              branches: [[ name: "${params.git_manifest_branch}" ]],
              userRemoteConfigs: [[
                url: "${sshRepoUrl}",
                credentialsId: "${params.git_credentials}"
              ]]
            )
          }
        }
        container('fetch') {
          withCredentials([sshUserPrivateKey(credentialsId: params.git_credentials, keyFileVariable: 'SSH_PRIVATE_KEY', passphraseVariable: 'SSH_PASSPHRASE', usernameVariable: 'GIT_USERNAME')]) {
            script {
              def fullImage = "${params.image}:${params.tag}"
              sh """
                set -e
                apk add --update --no-cache curl tar gzip git openssh
                curl -sSL https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v4.5.7/kustomize_v4.5.7_linux_amd64.tar.gz | tar xz -C /usr/local/bin
                kustomize version
                echo "[LOG] Target Service -> ${params.target_service}"
                echo "[LOG] Target Manifest Repo -> ${params.git_manifest_repository}"
                echo "[LOG] Target Image -> ${fullImage}"
                echo "[LOG] Checkout manifest repository"
                echo "[LOG] Target Environment -> ${params.environment_path}"
                ls -tlr *
                cd ${params.environment_path}
                kustomize edit set image ${params.target_service}=${fullImage}
                git config --global --add safe.directory "${WORKSPACE}"
                git config --global user.email '${params.git_user_email}'
                git config --global user.name '${params.git_user_name}'
                git status
                git diff
                if [[ \$(git diff --name-only | wc -l | tr -d ' ') -eq "0" ]]; then
                    echo '[WARN] No changes made to manifest'
                    exit 0
                fi
                git commit -am "pipeline update service ${params.target_service} to ${fullImage}"
                git remote set-url origin "git@github.com:${params.git_manifest_repository.replace('https://github.com/', '').replace('.git', '')}.git"
                GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no -i \"${SSH_PRIVATE_KEY}\"" git push origin HEAD:'${params.git_manifest_branch}'
              """
            }
          }
        }
      }
    }
  }
}
